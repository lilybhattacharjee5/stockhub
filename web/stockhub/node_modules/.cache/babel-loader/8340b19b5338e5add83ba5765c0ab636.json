{"ast":null,"code":"import _ from 'underscore';\nexport class TrieNode {\n  constructor(value, children) {\n    this.search = (node, string) => {\n      this.searchResult = [];\n\n      for (let char in string) {\n        if (node.children[char]) {\n          node = node.children[char];\n        } else {\n          return;\n        }\n      }\n\n      return this.recurseSearch(node);\n    };\n\n    this.recurseSearch = node => {\n      if (_.isEmpty(node.children)) {\n        this.searchResult.push(node.value);\n      }\n\n      const childNodes = Object.values(node.children);\n\n      for (let child in childNodes) {\n        this.recurseSearch(child);\n      }\n    };\n\n    this.insert = (node, string) => {\n      for (let char in string) {\n        if (!node.children[char]) {\n          node.children[char] = new TrieNode(char, {});\n        }\n\n        node = node.children[char];\n      }\n\n      node.value = string;\n    };\n\n    this.children = children;\n    this.value = value;\n    this.searchResult = [];\n  }\n\n}","map":{"version":3,"sources":["/Users/lilybhattacharjee/Documents/stockhub/web/stockhub/src/trie.js"],"names":["_","TrieNode","constructor","value","children","search","node","string","searchResult","char","recurseSearch","isEmpty","push","childNodes","Object","values","child","insert"],"mappings":"AAAA,OAAOA,CAAP,MAAc,YAAd;AAEA,OAAO,MAAMC,QAAN,CAAe;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAAA,SAM7BC,MAN6B,GAMpB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzB,WAAKC,YAAL,GAAoB,EAApB;;AACA,WAAK,IAAIC,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,YAAID,IAAI,CAACF,QAAL,CAAcK,IAAd,CAAJ,EAAyB;AACvBH,UAAAA,IAAI,GAAGA,IAAI,CAACF,QAAL,CAAcK,IAAd,CAAP;AACD,SAFD,MAEO;AACL;AACD;AACF;;AACD,aAAO,KAAKC,aAAL,CAAmBJ,IAAnB,CAAP;AACD,KAhB4B;;AAAA,SAkB7BI,aAlB6B,GAkBZJ,IAAD,IAAU;AACxB,UAAIN,CAAC,CAACW,OAAF,CAAUL,IAAI,CAACF,QAAf,CAAJ,EAA8B;AAC5B,aAAKI,YAAL,CAAkBI,IAAlB,CAAuBN,IAAI,CAACH,KAA5B;AACD;;AACD,YAAMU,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcT,IAAI,CAACF,QAAnB,CAAnB;;AACA,WAAK,IAAIY,KAAT,IAAkBH,UAAlB,EAA8B;AAC5B,aAAKH,aAAL,CAAmBM,KAAnB;AACD;AACF,KA1B4B;;AAAA,SA4B7BC,MA5B6B,GA4BpB,CAACX,IAAD,EAAOC,MAAP,KAAkB;AACzB,WAAK,IAAIE,IAAT,IAAiBF,MAAjB,EAAyB;AACvB,YAAI,CAACD,IAAI,CAACF,QAAL,CAAcK,IAAd,CAAL,EAA0B;AACxBH,UAAAA,IAAI,CAACF,QAAL,CAAcK,IAAd,IAAsB,IAAIR,QAAJ,CAAaQ,IAAb,EAAmB,EAAnB,CAAtB;AACD;;AACDH,QAAAA,IAAI,GAAGA,IAAI,CAACF,QAAL,CAAcK,IAAd,CAAP;AACD;;AACDH,MAAAA,IAAI,CAACH,KAAL,GAAaI,MAAb;AACD,KApC4B;;AAC3B,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKK,YAAL,GAAoB,EAApB;AACD;;AALmB","sourcesContent":["import _ from 'underscore';\n\nexport class TrieNode {\n  constructor(value, children) {\n    this.children = children;\n    this.value = value;\n    this.searchResult = [];\n  }\n\n  search = (node, string) => {\n    this.searchResult = [];\n    for (let char in string) {\n      if (node.children[char]) {\n        node = node.children[char];\n      } else {\n        return;\n      }\n    }\n    return this.recurseSearch(node);\n  }\n\n  recurseSearch = (node) => {\n    if (_.isEmpty(node.children)) {\n      this.searchResult.push(node.value);\n    }\n    const childNodes = Object.values(node.children);\n    for (let child in childNodes) {\n      this.recurseSearch(child);\n    }\n  }\n\n  insert = (node, string) => {\n    for (let char in string) {\n      if (!node.children[char]) {\n        node.children[char] = new TrieNode(char, {});\n      }\n      node = node.children[char];\n    }\n    node.value = string;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}