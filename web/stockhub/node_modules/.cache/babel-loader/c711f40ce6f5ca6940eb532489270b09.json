{"ast":null,"code":"import _ from 'underscore';\nexport class TrieNode {\n  constructor(value, children) {\n    this.search = (node, string) => {\n      if (!string) return [];\n      console.log(\"here\");\n      this.searchResult = [];\n\n      for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\n        if (node.children[char]) {\n          node = node.children[char];\n        } else {\n          return;\n        }\n      }\n\n      return this.recurseSearch(node);\n    };\n\n    this.recurseSearch = node => {\n      if (_.isEmpty(node.children)) {\n        this.searchResult.push(node.value);\n      }\n\n      const childNodes = Object.values(node.children);\n\n      for (let i = 0; i < childNodes.length; i++) {\n        this.recurseSearch(childNodes[i]);\n      }\n    };\n\n    this.insert = (node, string) => {\n      for (let i = 0; i < string.length; i++) {\n        const char = string[i];\n\n        if (!node.children[char]) {\n          node.children[char] = new TrieNode(char, {});\n        }\n\n        node = node.children[char];\n      }\n\n      node.value = string;\n    };\n\n    this.children = children;\n    this.value = value;\n    this.searchResult = [];\n  }\n\n}","map":{"version":3,"sources":["/Users/lilybhattacharjee/Documents/stockhub/web/stockhub/src/trie.js"],"names":["_","TrieNode","constructor","value","children","search","node","string","console","log","searchResult","i","length","char","recurseSearch","isEmpty","push","childNodes","Object","values","insert"],"mappings":"AAAA,OAAOA,CAAP,MAAc,YAAd;AAEA,OAAO,MAAMC,QAAN,CAAe;AACpBC,EAAAA,WAAW,CAACC,KAAD,EAAQC,QAAR,EAAkB;AAAA,SAM7BC,MAN6B,GAMpB,CAACC,IAAD,EAAOC,MAAP,KAAkB;AACzB,UAAI,CAACA,MAAL,EAAa,OAAO,EAAP;AACbC,MAAAA,OAAO,CAACC,GAAR,CAAY,MAAZ;AACA,WAAKC,YAAL,GAAoB,EAApB;;AACA,WAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,cAAME,IAAI,GAAGN,MAAM,CAACI,CAAD,CAAnB;;AACA,YAAIL,IAAI,CAACF,QAAL,CAAcS,IAAd,CAAJ,EAAyB;AACvBP,UAAAA,IAAI,GAAGA,IAAI,CAACF,QAAL,CAAcS,IAAd,CAAP;AACD,SAFD,MAEO;AACL;AACD;AACF;;AACD,aAAO,KAAKC,aAAL,CAAmBR,IAAnB,CAAP;AACD,KAnB4B;;AAAA,SAqB7BQ,aArB6B,GAqBZR,IAAD,IAAU;AACxB,UAAIN,CAAC,CAACe,OAAF,CAAUT,IAAI,CAACF,QAAf,CAAJ,EAA8B;AAC5B,aAAKM,YAAL,CAAkBM,IAAlB,CAAuBV,IAAI,CAACH,KAA5B;AACD;;AACD,YAAMc,UAAU,GAAGC,MAAM,CAACC,MAAP,CAAcb,IAAI,CAACF,QAAnB,CAAnB;;AACA,WAAK,IAAIO,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGM,UAAU,CAACL,MAA/B,EAAuCD,CAAC,EAAxC,EAA4C;AAC1C,aAAKG,aAAL,CAAmBG,UAAU,CAACN,CAAD,CAA7B;AACD;AACF,KA7B4B;;AAAA,SA+B7BS,MA/B6B,GA+BpB,CAACd,IAAD,EAAOC,MAAP,KAAkB;AACzB,WAAK,IAAII,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGJ,MAAM,CAACK,MAA3B,EAAmCD,CAAC,EAApC,EAAwC;AACtC,cAAME,IAAI,GAAGN,MAAM,CAACI,CAAD,CAAnB;;AACA,YAAI,CAACL,IAAI,CAACF,QAAL,CAAcS,IAAd,CAAL,EAA0B;AACxBP,UAAAA,IAAI,CAACF,QAAL,CAAcS,IAAd,IAAsB,IAAIZ,QAAJ,CAAaY,IAAb,EAAmB,EAAnB,CAAtB;AACD;;AACDP,QAAAA,IAAI,GAAGA,IAAI,CAACF,QAAL,CAAcS,IAAd,CAAP;AACD;;AACDP,MAAAA,IAAI,CAACH,KAAL,GAAaI,MAAb;AACD,KAxC4B;;AAC3B,SAAKH,QAAL,GAAgBA,QAAhB;AACA,SAAKD,KAAL,GAAaA,KAAb;AACA,SAAKO,YAAL,GAAoB,EAApB;AACD;;AALmB","sourcesContent":["import _ from 'underscore';\n\nexport class TrieNode {\n  constructor(value, children) {\n    this.children = children;\n    this.value = value;\n    this.searchResult = [];\n  }\n\n  search = (node, string) => {\n    if (!string) return [];\n    console.log(\"here\");\n    this.searchResult = [];\n    for (let i = 0; i < string.length; i++) {\n      const char = string[i];\n      if (node.children[char]) {\n        node = node.children[char];\n      } else {\n        return;\n      }\n    }\n    return this.recurseSearch(node);\n  }\n\n  recurseSearch = (node) => {\n    if (_.isEmpty(node.children)) {\n      this.searchResult.push(node.value);\n    }\n    const childNodes = Object.values(node.children);\n    for (let i = 0; i < childNodes.length; i++) {\n      this.recurseSearch(childNodes[i]);\n    }\n  }\n\n  insert = (node, string) => {\n    for (let i = 0; i < string.length; i++) {\n      const char = string[i];\n      if (!node.children[char]) {\n        node.children[char] = new TrieNode(char, {});\n      }\n      node = node.children[char];\n    }\n    node.value = string;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}